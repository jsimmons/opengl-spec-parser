--[[
Copyright (C) 2011 by Joshua Simmons

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

THIS DOCUMENT WAS AUTOMATICALLY GENERATED BY THE BOSS GL-SPEC-PARSER OVER AT
https://github.com/jsimmons/opengl-spec-parser
IT'S AWESOME AND CAPSLOCK AND STUFF
]]

local ffi = require 'ffi'

ffi.cdef [[
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLsizei;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void GLvoid;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef char GLchar;
typedef char GLcharARB;
typedef void *GLhandleARB;
typedef long GLintptrARB;
typedef long GLsizeiptrARB;
typedef unsigned short GLhalfARB;
typedef unsigned short GLhalfNV;
typedef unsigned short GLhalf;
typedef int64_t GLint64;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64;
typedef uint64_t GLuint64EXT;
typedef GLintptr GLvdpauSurfaceNV;
typedef struct __GLsync *GLsync;

// Broken
typedef int GLDEBUGPROCARB;
typedef int GLDEBUGPROCAMD;

enum {
{{for name, value in pairs(spec.enums) do}}
    GL_{{=name}} = {{=value}},
{{end}}
};

{{
for name, data in pairs(spec.funcs) do
    echo(data.return_type .. ' gl' .. name .. '(')
    local count = #data.params
    for i = 1, count do
        local param = data.params[i]

        if param.dir == 'in' and param.mode ~= 'value' then
            echo('const ')
        end

        echo(param.type .. ((param.mode == 'value') and '' or '*'))

        if param.mode ~= 'value' then
            echo('*')
        end

        if i < count then
            echo(', ')
        end
    end
    echo(');\n')
end
}}
]]

return ffi.load('GL')
